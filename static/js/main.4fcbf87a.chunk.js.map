{"version":3,"sources":["features/drum/drumFunctions.js","features/drum/drumSlice.js","features/drum/Button.js","features/drum/Drum.js","Footer.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["keys","sounds","Audio","drumSlice","createSlice","name","initialState","power","volume","track","text","reducers","pressKey","state","action","keyPressed","payload","newVolume","snd","currentTime","play","playSound","keyLookup","flipPower","flipTrack","setVolume","parseInt","actions","Button","props","dispatch","useDispatch","useState","btnClass","setBtnClass","flashButton","setTimeout","useEffect","document","addEventListener","e","key","toUpperCase","letter","className","onClick","Drum","powerStatus","useSelector","drum","lastAction","trackStatus","id","type","min","max","defaultValue","onInput","target","value","onChange","Footer","href","App","store","configureStore","reducer","drumReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4fcbf87a.chunk.js","sourcesContent":["const keys = {\r\n  'Q': ['Heater 1', 'Chord 1'],\r\n  'W': ['Heater 2', 'Chord 2'],\r\n  'E': ['Heater 3', 'Chord 3'],\r\n  'A': ['Heater 4', 'Shaker'],\r\n  'S': ['Clap', 'Open HH'],\r\n  'D': ['Open HH', 'Closed HH'],\r\n  'Z': [\"Kick n' Hat\", 'Punchy Kick'],\r\n  'X': ['Kick', 'Side Stick'],\r\n  'C': ['Closed HH', 'Snare'],\r\n}\r\n\r\nexport const keyLookup = (keyPressed, track) => keys[keyPressed][track === 'A' ? 0 : 1]\r\n\r\nconst sounds = {\r\n  'Q': [\r\n    new Audio('https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3'),\r\n    new Audio('https://s3.amazonaws.com/freecodecamp/drums/Chord_1.mp3')\r\n  ],\r\n  'W': [\r\n    new Audio('https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3'),\r\n    new Audio('https://s3.amazonaws.com/freecodecamp/drums/Chord_2.mp3')\r\n  ],\r\n  'E':  [\r\n    new Audio('https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3'),\r\n    new Audio('https://s3.amazonaws.com/freecodecamp/drums/Chord_3.mp3')\r\n  ],\r\n  'A':  [\r\n    new Audio('https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3'),\r\n    new Audio('https://s3.amazonaws.com/freecodecamp/drums/Give_us_a_light.mp3')\r\n  ],\r\n  'S':  [\r\n    new Audio('https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3'),\r\n    new Audio('https://s3.amazonaws.com/freecodecamp/drums/Dry_Ohh.mp3')\r\n  ],\r\n  'D':  [\r\n    new Audio('https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3'),\r\n    new Audio('https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3')\r\n  ],\r\n  'Z':  [\r\n    new Audio('https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3'),\r\n    new Audio('https://s3.amazonaws.com/freecodecamp/drums/punchy_kick_1.mp3')\r\n  ],\r\n  'X': [\r\n    new Audio('https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3'),\r\n    new Audio('https://s3.amazonaws.com/freecodecamp/drums/side_stick_1.mp3')\r\n  ],\r\n  'C':  [\r\n    new Audio('https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3'),\r\n    new Audio('https://s3.amazonaws.com/freecodecamp/drums/Brk_Snr.mp3')\r\n  ]\r\n}\r\n\r\nexport const playSound = (keyPressed, track, newVolume) => {\r\n  var snd = sounds[keyPressed][track === 'A' ? 0 : 1]\r\n  snd.volume = newVolume/100\r\n  snd.currentTime = 0\r\n  snd.play()\r\n}\r\n","import { createSlice } from '@reduxjs/toolkit';\r\nimport {\r\n  playSound,\r\n  keyLookup\r\n} from './drumFunctions'\r\n\r\nconst initialState = {\r\n  power: true,\r\n  volume: 100,\r\n  track: 'A',\r\n  text: ''\r\n};\r\n\r\nexport const drumSlice = createSlice({\r\n  name: 'drum',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    pressKey: (state, action) => {\r\n      const keyPressed = action.payload;\r\n      if(state.power) {\r\n        // button flash is done in the Button component\r\n        // play sound\r\n        playSound(keyPressed, state.track, state.volume)\r\n        // update text box\r\n        state.text = keyLookup(keyPressed, state.track)\r\n      }\r\n    },\r\n\r\n    flipPower: (state, action) => {\r\n      // I know this is terrible for a redux app, but this is in createSlice so it's okay\r\n      if(state.power) state.text = ''\r\n      state.power = !state.power\r\n    },\r\n\r\n    flipTrack: (state, action) => {\r\n      state.track = (state.track === 'A')\r\n        ? 'B'\r\n        : 'A'\r\n    },\r\n\r\n    setVolume: (state, action) => {\r\n      state.volume = parseInt(action.payload);\r\n      state.text = 'Volume: ' + state.volume\r\n    }\r\n  },\r\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\r\n  // including actions generated by createAsyncThunk or in other slices.\r\n  // extraReducers: ,\r\n});\r\n\r\nexport const { pressKey, flipPower, flipTrack, setVolume } = drumSlice.actions;\r\n\r\nexport default drumSlice.reducer;\r\n","import React, { useEffect, useState } from 'react'\r\n// The button component is only responsible for dispatching the keypress action. Any logic (including power, volume, side) is handled by the redux state reducers\r\nimport { useDispatch } from 'react-redux'\r\nimport { pressKey } from './drumSlice'\r\n\r\n\r\nexport function Button(props) {\r\n  const dispatch = useDispatch()\r\n\r\n  // Use a local state here to change classes for the flash animation\r\n  const [btnClass, setBtnClass] = useState('btnIdle')\r\n\r\n  const flashButton = () => {\r\n    setBtnClass('btnClicked');\r\n    setTimeout(\r\n      () => setBtnClass('btnIdle'),\r\n      200\r\n    )\r\n  }\r\n\r\n  // Adding the event listener here simplifies our logic a bit, since we can\r\n  // check directly in the button component if the keypress matches a button\r\n  useEffect(() => {\r\n    const handleKeyPress = e => {\r\n      if(e.key.toUpperCase() === props.letter) {\r\n        flashButton()\r\n        dispatch(pressKey(props.letter))\r\n      }\r\n    }\r\n    document.addEventListener(\"keypress\", handleKeyPress)\r\n  })\r\n\r\n  return (\r\n    <button\r\n      className={'drumButton ' + btnClass}\r\n      onClick={() => {\r\n        flashButton()\r\n        dispatch(pressKey(props.letter))\r\n      }}\r\n    >\r\n      {props.letter}\r\n    </button>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n  flipPower,\r\n  flipTrack,\r\n  setVolume\r\n} from './drumSlice';\r\nimport { Button } from './Button'\r\n\r\n\r\nexport const Drum = () => {\r\n  const dispatch = useDispatch();\r\n  // const keysUsed = ['Q','W','E','A','S','D','Z','X','C'];\r\n  const powerStatus = useSelector(state => state.drum.power)\r\n  const lastAction = useSelector(state => state.drum.text)\r\n  const trackStatus = useSelector(state => state.drum.track)\r\n\r\n  return (\r\n    <div className=\"drumbox\">\r\n      <div className=\"row boxRow\">\r\n        <div className=\"col-8\">\r\n          <div className=\"row btnRow justify-content-around\">\r\n            <Button id=\"Qbtn\" letter=\"Q\" />\r\n            <Button id=\"Wbtn\" letter=\"W\" />\r\n            <Button id=\"Ebtn\" letter=\"E\" />\r\n          </div>\r\n          <div className=\"row btnRow justify-content-around\">\r\n            <Button id=\"Abtn\" letter=\"A\" />\r\n            <Button id=\"Sbtn\" letter=\"S\" />\r\n            <Button id=\"Dbtn\" letter=\"D\" />\r\n          </div>\r\n          <div className=\"row btnRow justify-content-around\">\r\n            <Button id=\"Zbtn\" letter=\"Z\" />\r\n            <Button id=\"Xbtn\" letter=\"X\" />\r\n            <Button id=\"Cbtn\" letter=\"C\" />\r\n          </div>\r\n        </div>\r\n\r\n\r\n        <div className=\"col-4 align-self-center display-col\">\r\n          <button\r\n            className=\"powerButton\"\r\n            onClick={() => dispatch(flipPower())}\r\n          >\r\n            Power: {powerStatus ? 'ON' : 'OFF'}\r\n          </button>\r\n\r\n          <br /><br />\r\n\r\n          <p className=\"soundText\">\r\n            {lastAction}\r\n          </p>\r\n\r\n          <br />\r\n\r\n          <div className=\"slidecontainer\">\r\n            <input\r\n              className=\"slider\"\r\n              type=\"range\"\r\n              min=\"1\"\r\n              max=\"100\"\r\n              defaultValue=\"100\"\r\n              id=\"myRange\"\r\n              onInput={e => dispatch(setVolume(e.target.value))}\r\n              onChange={e => dispatch(setVolume(e.target.value))}\r\n            />\r\n          </div>\r\n\r\n          <br />\r\n\r\n          <button\r\n            className=\"trackButton\"\r\n            onClick={() => dispatch(flipTrack())}\r\n          >\r\n            Track: {trackStatus}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\nexport const Footer = () => {\r\n  return (\r\n    <div id=\"footer\">\r\n      Built by <a target=\"blank\" href=\"https://nicholashou.com\">Nick Hou</a>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport { Drum } from './features/drum/Drum';\r\nimport { Footer } from './Footer';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Drum />\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport drumReducer from '../features/drum/drumSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    drum: drumReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}