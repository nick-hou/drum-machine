{"version":3,"sources":["features/drum/drumFunctions.js","features/drum/drumSlice.js","features/drum/Button.js","features/drum/Drum.js","Footer.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["keys","sounds","Audio","drumSlice","createSlice","name","initialState","power","volume","track","text","reducers","pressKey","state","action","keyPressed","payload","newVolume","snd","currentTime","play","playSound","keyLookup","flipPower","flipTrack","setVolume","parseInt","actions","Button","props","dispatch","useDispatch","useState","btnClass","setBtnClass","flashButton","setTimeout","useEffect","document","addEventListener","e","key","toUpperCase","letter","className","onClick","Drum","powerStatus","useSelector","drum","lastAction","trackStatus","id","type","min","max","defaultValue","onInput","target","value","onChange","Footer","href","App","store","configureStore","reducer","drumReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f619da7c.chunk.js","sourcesContent":["const keys = {\r\n  'Q': ['Heater 1', 'Chord 1'],\r\n  'W': ['Heater 2', 'Chord 2'],\r\n  'E': ['Heater 3', 'Chord 3'],\r\n  'A': ['Heater 4', 'Shaker'],\r\n  'S': ['Clap', 'Open HH'],\r\n  'D': ['Open HH', 'Closed HH'],\r\n  'Z': [\"Kick n' Hat\", 'Punchy Kick'],\r\n  'X': ['Kick', 'Side Stick'],\r\n  'C': ['Closed HH', 'Snare'],\r\n}\r\n\r\nexport const keyLookup = (keyPressed, track) => keys[keyPressed][track === 'A' ? 0 : 1]\r\n\r\nconst sounds = {\r\n  'Q': [\r\n    new Audio('https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3'),\r\n    new Audio('https://s3.amazonaws.com/freecodecamp/drums/Chord_1.mp3')\r\n  ],\r\n  'W': [\r\n    new Audio('https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3'),\r\n    new Audio('https://s3.amazonaws.com/freecodecamp/drums/Chord_2.mp3')\r\n  ],\r\n  'E':  [\r\n    new Audio('https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3'),\r\n    new Audio('https://s3.amazonaws.com/freecodecamp/drums/Chord_3.mp3')\r\n  ],\r\n  'A':  [\r\n    new Audio('https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3'),\r\n    new Audio('https://s3.amazonaws.com/freecodecamp/drums/Give_us_a_light.mp3')\r\n  ],\r\n  'S':  [\r\n    new Audio('https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3'),\r\n    new Audio('https://s3.amazonaws.com/freecodecamp/drums/Dry_Ohh.mp3')\r\n  ],\r\n  'D':  [\r\n    new Audio('https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3'),\r\n    new Audio('https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3')\r\n  ],\r\n  'Z':  [\r\n    new Audio('https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3'),\r\n    new Audio('https://s3.amazonaws.com/freecodecamp/drums/punchy_kick_1.mp3')\r\n  ],\r\n  'X': [\r\n    new Audio('https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3'),\r\n    new Audio('https://s3.amazonaws.com/freecodecamp/drums/side_stick_1.mp3')\r\n  ],\r\n  'C':  [\r\n    new Audio('https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3'),\r\n    new Audio('https://s3.amazonaws.com/freecodecamp/drums/Brk_Snr.mp3')\r\n  ]\r\n}\r\n\r\nexport const playSound = (keyPressed, track, newVolume) => {\r\n  var snd = sounds[keyPressed][track === 'A' ? 0 : 1]\r\n  snd.volume = newVolume/100\r\n  snd.currentTime = 0\r\n  snd.play()\r\n}\r\n","import { createSlice } from '@reduxjs/toolkit';\nimport {\n  playSound,\n  keyLookup\n} from './drumFunctions'\n\nconst initialState = {\n  power: true,\n  volume: 100,\n  track: 'A',\n  text: ''\n};\n\nexport const drumSlice = createSlice({\n  name: 'drum',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    pressKey: (state, action) => {\n      const keyPressed = action.payload;\n      if(state.power) {\n        // button flash is done in the Button component\n        // play sound\n        playSound(keyPressed, state.track, state.volume)\n        // update text box\n        state.text = keyLookup(keyPressed, state.track)\n      }\n    },\n\n    flipPower: (state, action) => {\n      // I know this is terrible for a redux app, but this is in createSlice so it's okay\n      if(state.power) state.text = ''\n      state.power = !state.power\n    },\n\n    flipTrack: (state, action) => {\n      state.track = (state.track === 'A')\n        ? 'B'\n        : 'A'\n    },\n\n    setVolume: (state, action) => {\n      state.volume = parseInt(action.payload);\n      state.text = 'Volume: ' + state.volume\n    }\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  // extraReducers: ,\n});\n\nexport const { pressKey, flipPower, flipTrack, setVolume } = drumSlice.actions;\n\nexport default drumSlice.reducer;\n","import React, { useEffect, useState } from 'react'\r\n// The button component is only responsible for dispatching the keypress action. Any logic (including power, volume, side) is handled by the redux state reducers\r\nimport { useDispatch } from 'react-redux'\r\nimport { pressKey } from './drumSlice'\r\n\r\n\r\nexport function Button(props) {\r\n  const dispatch = useDispatch()\r\n\r\n  // Use a local state here to change classes for the flash animation\r\n  const [btnClass, setBtnClass] = useState('btnIdle')\r\n\r\n  const flashButton = () => {\r\n    setBtnClass('btnClicked');\r\n    setTimeout(\r\n      () => setBtnClass('btnIdle'),\r\n      200\r\n    )\r\n  }\r\n\r\n  // Adding the event listener here simplifies our logic a bit, since we can\r\n  // check directly in the button component if the keypress matches a button\r\n  useEffect(() => {\r\n    const handleKeyPress = e => {\r\n      if(e.key.toUpperCase() === props.letter) {\r\n        flashButton()\r\n        dispatch(pressKey(props.letter))\r\n      }\r\n    }\r\n    document.addEventListener(\"keypress\", handleKeyPress)\r\n  }, [])\r\n\r\n  return (\r\n    <button\r\n      className={'drumButton ' + btnClass}\r\n      onClick={() => {\r\n        flashButton()\r\n        dispatch(pressKey(props.letter))\r\n      }}\r\n    >\r\n      {props.letter}\r\n    </button>\r\n  )\r\n}\r\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  flipPower,\n  flipTrack,\n  setVolume\n} from './drumSlice';\nimport { Button } from './Button'\n\n\nexport const Drum = () => {\n  const dispatch = useDispatch();\n  // const keysUsed = ['Q','W','E','A','S','D','Z','X','C'];\n  const powerStatus = useSelector(state => state.drum.power)\n  const lastAction = useSelector(state => state.drum.text)\n  const trackStatus = useSelector(state => state.drum.track)\n\n  return (\n    <div className=\"drumbox\">\n      <div className=\"row boxRow\">\n        <div className=\"col\">\n          <div className=\"row btnRow justify-content-around\">\n            <Button id=\"Qbtn\" letter=\"Q\" />\n            <Button id=\"Wbtn\" letter=\"W\" />\n            <Button id=\"Ebtn\" letter=\"E\" />\n          </div>\n          <div className=\"row btnRow justify-content-around\">\n            <Button id=\"Abtn\" letter=\"A\" />\n            <Button id=\"Sbtn\" letter=\"S\" />\n            <Button id=\"Dbtn\" letter=\"D\" />\n          </div>\n          <div className=\"row btnRow justify-content-around\">\n            <Button id=\"Zbtn\" letter=\"Z\" />\n            <Button id=\"Xbtn\" letter=\"X\" />\n            <Button id=\"Cbtn\" letter=\"C\" />\n          </div>\n        </div>\n\n\n        <div className=\"col align-self-center display-col\">\n          <button\n            className=\"powerButton\"\n            onClick={() => dispatch(flipPower())}\n          >\n            Power: {powerStatus ? 'ON' : 'OFF'}\n          </button>\n\n          <br /><br />\n\n          <p className=\"soundText\">\n            {lastAction}\n          </p>\n\n          <br />\n\n          <div className=\"slidecontainer\">\n            <input\n              className=\"slider\"\n              type=\"range\"\n              min=\"1\"\n              max=\"100\"\n              defaultValue=\"100\"\n              id=\"myRange\"\n              onInput={e => dispatch(setVolume(e.target.value))}\n              onChange={e => dispatch(setVolume(e.target.value))}\n            />\n          </div>\n\n          <br />\n\n          <button\n            className=\"trackButton\"\n            onClick={() => dispatch(flipTrack())}\n          >\n            Track: {trackStatus}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from 'react'\r\n\r\nexport const Footer = () => {\r\n  return (\r\n    <div>\r\n      Built by <a target=\"blank\" href=\"https://nicholashou.com\">Nick Hou</a>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\nimport { Drum } from './features/drum/Drum';\nimport { Footer } from './Footer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Drum />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport drumReducer from '../features/drum/drumSlice';\n\nexport const store = configureStore({\n  reducer: {\n    drum: drumReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}